2025-06-22T21:58:11.407+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] app.Application                          : Starting Application using Java 24.0.1 with PID 11320 (C:\DEV\spring-boot-jwt-auth-refresh\target\classes started by ALEX in C:\DEV\spring-boot-jwt-auth-refresh)
2025-06-22T21:58:11.411+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [main] app.Application                          : Running with Spring Boot v3.5.3, Spring v6.2.8
2025-06-22T21:58:11.413+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] app.Application                          : The following 1 profile is active: "dev"
2025-06-22T21:58:13.775+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-22T21:58:13.981+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 176 ms. Found 2 JPA repository interfaces.
2025-06-22T21:58:15.597+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-22T21:58:15.630+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-22T21:58:15.631+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-06-22T21:58:15.734+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-06-22T21:58:15.735+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 4189 ms
2025-06-22T21:58:16.092+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-22T21:58:16.202+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.18.Final
2025-06-22T21:58:16.274+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-22T21:58:16.890+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-22T21:58:16.955+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-06-22T21:58:17.293+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@cdbe995
2025-06-22T21:58:17.296+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-06-22T21:58:17.357+02:00  WARN 11320 --- [spring-boot-jwt-auth-refresh] [main] org.hibernate.orm.deprecation            : HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-22T21:58:17.360+02:00  WARN 11320 --- [spring-boot-jwt-auth-refresh] [main] org.hibernate.orm.deprecation            : HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-22T21:58:17.398+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-22T21:58:19.396+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-22T21:58:20.608+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-22T21:58:21.482+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [main] app.filter.JwtAuthenticationFilter       : Filter 'jwtAuthenticationFilter' configured for use
2025-06-22T21:58:21.483+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [main] app.filter.RequestLoggingFilter          : Filter 'requestLoggingFilter' configured for use
2025-06-22T21:58:21.650+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-06-22T21:58:22.669+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, LogoutFilter, RequestLoggingFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-06-22T21:58:23.442+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-22T21:58:23.458+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [main] app.Application                          : Started Application in 13.196 seconds (process running for 14.661)
2025-06-22T21:58:34.105+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-22T21:58:34.106+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-06-22T21:58:34.108+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
2025-06-22T21:58:34.146+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing POST /api/auth/register
2025-06-22T21:58:34.184+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-22T21:58:34.185+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id 3707F987AF2E25021EB804BDF1FBE0A9
2025-06-22T21:58:34.192+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured POST /api/auth/register
2025-06-22T21:58:34.466+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.service.AuthService                  : Registering new user with username: alex
2025-06-22T21:58:34.474+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.repository.UserRepository            : Checking if user exists with username: alex
2025-06-22T21:58:34.797+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.repository.UserRepository            : User with username 'alex' exists: false
2025-06-22T21:58:35.050+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.service.AuthService                  : Successfully registered user: alex with role: ROLE_ADMIN
2025-06-22T21:59:13.581+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing POST /api/auth/login
2025-06-22T21:59:13.587+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.filter.RequestLoggingFilter          : Request URL: POST http://localhost:8080/api/auth/login
2025-06-22T21:59:13.588+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.filter.RequestLoggingFilter          : Content-Type: application/json
2025-06-22T21:59:13.588+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.filter.RequestLoggingFilter          : Content-Length: 53
2025-06-22T21:59:13.588+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-22T21:59:13.589+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id 3707F987AF2E25021EB804BDF1FBE0A9
2025-06-22T21:59:13.589+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Secured POST /api/auth/login
2025-06-22T21:59:13.607+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.controller.AuthController            : Raw login request received: {username=alex, password=password123}
2025-06-22T21:59:13.608+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.controller.AuthController            : Attempting login for user: 'alex'
2025-06-22T21:59:13.608+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.AuthService                  : Attempting to authenticate user: 'alex'
2025-06-22T21:59:13.778+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.CustomUserDetailsService     : Attempting to load user by username: alex
2025-06-22T21:59:13.780+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.repository.UserRepository            : Searching for user by username: alex
2025-06-22T21:59:13.975+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.repository.UserRepository            : User found by username 'alex': yes
2025-06-22T21:59:13.976+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.CustomUserDetailsService     : Found user: alex with role: ROLE_ADMIN
2025-06-22T21:59:14.217+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2025-06-22T21:59:14.219+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.AuthService                  : Authentication successful for user: 'alex'
2025-06-22T21:59:14.472+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.JwtService                   : Generated token pair for user 'alex'
2025-06-22T21:59:14.473+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.controller.AuthController            : Login successful for user: 'alex'
2025-06-22T21:59:14.478+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.filter.RequestLoggingFilter          : Request payload: {
  "username": "alex",
  "password": "password123"
}
2025-06-22T21:59:30.417+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing POST /api/products
2025-06-22T21:59:30.418+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-22T21:59:30.419+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id 3707F987AF2E25021EB804BDF1FBE0A9
2025-06-22T21:59:41.526+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Securing POST /api/auth/login
2025-06-22T21:59:41.527+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.filter.RequestLoggingFilter          : Request URL: POST http://localhost:8080/api/auth/login
2025-06-22T21:59:41.527+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.filter.RequestLoggingFilter          : Content-Type: application/json
2025-06-22T21:59:41.527+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.filter.RequestLoggingFilter          : Content-Length: 53
2025-06-22T21:59:41.528+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-22T21:59:41.528+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id 3707F987AF2E25021EB804BDF1FBE0A9
2025-06-22T21:59:41.529+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Secured POST /api/auth/login
2025-06-22T21:59:41.532+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.controller.AuthController            : Raw login request received: {username=alex, password=password123}
2025-06-22T21:59:41.533+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.controller.AuthController            : Attempting login for user: 'alex'
2025-06-22T21:59:41.533+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.service.AuthService                  : Attempting to authenticate user: 'alex'
2025-06-22T21:59:41.533+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.service.CustomUserDetailsService     : Attempting to load user by username: alex
2025-06-22T21:59:41.533+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.repository.UserRepository            : Searching for user by username: alex
2025-06-22T21:59:41.541+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.repository.UserRepository            : User found by username 'alex': yes
2025-06-22T21:59:41.542+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.service.CustomUserDetailsService     : Found user: alex with role: ROLE_ADMIN
2025-06-22T21:59:41.690+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2025-06-22T21:59:41.691+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.service.AuthService                  : Authentication successful for user: 'alex'
2025-06-22T21:59:41.693+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.service.JwtService                   : Generated token pair for user 'alex'
2025-06-22T21:59:41.694+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.controller.AuthController            : Login successful for user: 'alex'
2025-06-22T21:59:41.697+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.filter.RequestLoggingFilter          : Request payload: {
  "username": "alex",
  "password": "password123"
}
2025-06-22T22:00:20.122+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Securing POST /api/products
2025-06-22T22:00:20.123+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-7] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-22T22:00:20.123+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-7] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id 3707F987AF2E25021EB804BDF1FBE0A9
2025-06-22T22:02:59.924+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing POST /api/auth/login
2025-06-22T22:02:59.925+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.filter.RequestLoggingFilter          : Request URL: POST http://localhost:8080/api/auth/login
2025-06-22T22:02:59.925+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.filter.RequestLoggingFilter          : Content-Type: application/json
2025-06-22T22:02:59.926+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.filter.RequestLoggingFilter          : Content-Length: 53
2025-06-22T22:02:59.926+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-22T22:02:59.927+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id 3707F987AF2E25021EB804BDF1FBE0A9
2025-06-22T22:02:59.927+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured POST /api/auth/login
2025-06-22T22:02:59.929+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.controller.AuthController            : Raw login request received: {username=alex, password=password123}
2025-06-22T22:02:59.930+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.controller.AuthController            : Attempting login for user: 'alex'
2025-06-22T22:02:59.931+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.service.AuthService                  : Attempting to authenticate user: 'alex'
2025-06-22T22:02:59.931+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.service.CustomUserDetailsService     : Attempting to load user by username: alex
2025-06-22T22:02:59.931+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.repository.UserRepository            : Searching for user by username: alex
2025-06-22T22:02:59.940+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.repository.UserRepository            : User found by username 'alex': yes
2025-06-22T22:02:59.941+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.service.CustomUserDetailsService     : Found user: alex with role: ROLE_ADMIN
2025-06-22T22:03:00.119+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2025-06-22T22:03:00.121+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.service.AuthService                  : Authentication successful for user: 'alex'
2025-06-22T22:03:00.124+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.service.JwtService                   : Generated token pair for user 'alex'
2025-06-22T22:03:00.124+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.controller.AuthController            : Login successful for user: 'alex'
2025-06-22T22:03:00.131+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.filter.RequestLoggingFilter          : Request payload: {
  "username": "alex",
  "password": "password123"
}
2025-06-22T22:03:09.840+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing POST /api/products
2025-06-22T22:03:09.947+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.JwtService                   : Extracted claims successfully: subject='alex', type='accessToken'
2025-06-22T22:03:09.948+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.JwtService                   : Extracted username from access token: alex
2025-06-22T22:03:09.948+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.CustomUserDetailsService     : Attempting to load user by username: alex
2025-06-22T22:03:09.949+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.repository.UserRepository            : Searching for user by username: alex
2025-06-22T22:03:09.956+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.repository.UserRepository            : User found by username 'alex': yes
2025-06-22T22:03:09.956+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.CustomUserDetailsService     : Found user: alex with role: ROLE_ADMIN
2025-06-22T22:03:09.958+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.JwtService                   : Extracted claims successfully: subject='alex', type='accessToken'
2025-06-22T22:03:09.958+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.JwtService                   : Extracted username from access token: alex
2025-06-22T22:03:09.958+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.JwtService                   : Token validation for user 'alex': true
2025-06-22T22:03:09.959+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Secured POST /api/products
2025-06-22T22:03:09.974+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] horizationManagerBeforeMethodInterceptor : Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity app.controller.ProductController.createProduct(app.model.Product); target is of class [app.controller.ProductController]
2025-06-22T22:03:10.032+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] horizationManagerBeforeMethodInterceptor : Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity app.controller.ProductController.createProduct(app.model.Product); target is of class [app.controller.ProductController]
2025-06-22T22:03:21.626+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing PUT /api/products/1
2025-06-22T22:03:21.628+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.service.JwtService                   : Extracted claims successfully: subject='alex', type='accessToken'
2025-06-22T22:03:21.629+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.service.JwtService                   : Extracted username from access token: alex
2025-06-22T22:03:21.629+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.service.CustomUserDetailsService     : Attempting to load user by username: alex
2025-06-22T22:03:21.629+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.repository.UserRepository            : Searching for user by username: alex
2025-06-22T22:03:21.637+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.repository.UserRepository            : User found by username 'alex': yes
2025-06-22T22:03:21.638+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.service.CustomUserDetailsService     : Found user: alex with role: ROLE_ADMIN
2025-06-22T22:03:21.640+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.service.JwtService                   : Extracted claims successfully: subject='alex', type='accessToken'
2025-06-22T22:03:21.640+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.service.JwtService                   : Extracted username from access token: alex
2025-06-22T22:03:21.641+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.service.JwtService                   : Token validation for user 'alex': true
2025-06-22T22:03:21.643+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured PUT /api/products/1
2025-06-22T22:03:21.654+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] horizationManagerBeforeMethodInterceptor : Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity app.controller.ProductController.updateProduct(java.lang.Long,app.dto.ProductDto); target is of class [app.controller.ProductController]
2025-06-22T22:03:21.656+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] horizationManagerBeforeMethodInterceptor : Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity app.controller.ProductController.updateProduct(java.lang.Long,app.dto.ProductDto); target is of class [app.controller.ProductController]
2025-06-22T22:03:27.344+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing DELETE /api/products/1
2025-06-22T22:03:27.347+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.service.JwtService                   : Extracted claims successfully: subject='alex', type='accessToken'
2025-06-22T22:03:27.348+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.service.JwtService                   : Extracted username from access token: alex
2025-06-22T22:03:27.349+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.service.CustomUserDetailsService     : Attempting to load user by username: alex
2025-06-22T22:03:27.349+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.repository.UserRepository            : Searching for user by username: alex
2025-06-22T22:03:27.360+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.repository.UserRepository            : User found by username 'alex': yes
2025-06-22T22:03:27.360+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.service.CustomUserDetailsService     : Found user: alex with role: ROLE_ADMIN
2025-06-22T22:03:27.362+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.service.JwtService                   : Extracted claims successfully: subject='alex', type='accessToken'
2025-06-22T22:03:27.365+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.service.JwtService                   : Extracted username from access token: alex
2025-06-22T22:03:27.365+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.service.JwtService                   : Token validation for user 'alex': true
2025-06-22T22:03:27.366+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured DELETE /api/products/1
2025-06-22T22:03:27.368+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] horizationManagerBeforeMethodInterceptor : Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity app.controller.ProductController.deleteProduct(java.lang.Long); target is of class [app.controller.ProductController]
2025-06-22T22:03:27.370+02:00 DEBUG 11320 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] horizationManagerBeforeMethodInterceptor : Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity app.controller.ProductController.deleteProduct(java.lang.Long); target is of class [app.controller.ProductController]
2025-06-22T22:05:12.427+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [SpringApplicationShutdownHook] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2025-06-22T22:05:12.444+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2025-06-22T22:05:12.456+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [SpringApplicationShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-22T22:05:12.497+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-06-22T22:05:12.509+02:00  INFO 11320 --- [spring-boot-jwt-auth-refresh] [SpringApplicationShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2025-06-22T22:05:51.948+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] app.Application                          : Starting Application using Java 24.0.1 with PID 13812 (C:\DEV\spring-boot-jwt-auth-refresh\target\classes started by ALEX in C:\DEV\spring-boot-jwt-auth-refresh)
2025-06-22T22:05:51.953+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [main] app.Application                          : Running with Spring Boot v3.5.3, Spring v6.2.8
2025-06-22T22:05:51.955+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] app.Application                          : The following 1 profile is active: "dev"
2025-06-22T22:05:53.978+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-22T22:05:54.205+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 192 ms. Found 2 JPA repository interfaces.
2025-06-22T22:05:55.864+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-06-22T22:05:55.898+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-06-22T22:05:55.899+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-06-22T22:05:56.023+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-06-22T22:05:56.025+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 3928 ms
2025-06-22T22:05:56.540+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-22T22:05:56.709+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.18.Final
2025-06-22T22:05:56.828+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-22T22:05:57.666+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-22T22:05:57.747+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-06-22T22:05:58.167+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@255ed8e4
2025-06-22T22:05:58.171+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-06-22T22:05:58.228+02:00  WARN 13812 --- [spring-boot-jwt-auth-refresh] [main] org.hibernate.orm.deprecation            : HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-22T22:05:58.249+02:00  WARN 13812 --- [spring-boot-jwt-auth-refresh] [main] org.hibernate.orm.deprecation            : HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-22T22:05:58.295+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-22T22:06:00.555+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-22T22:06:02.131+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-22T22:06:03.274+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [main] app.filter.JwtAuthenticationFilter       : Filter 'jwtAuthenticationFilter' configured for use
2025-06-22T22:06:03.275+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [main] app.filter.RequestLoggingFilter          : Filter 'requestLoggingFilter' configured for use
2025-06-22T22:06:03.740+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-06-22T22:06:05.147+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, LogoutFilter, RequestLoggingFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-06-22T22:06:06.051+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-06-22T22:06:06.080+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [main] app.Application                          : Started Application in 15.253 seconds (process running for 16.768)
2025-06-22T22:07:09.005+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-22T22:07:09.006+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-06-22T22:07:09.015+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2025-06-22T22:07:09.216+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing POST /api/auth/login
2025-06-22T22:07:09.246+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.filter.RequestLoggingFilter          : Request URL: POST http://localhost:8080/api/auth/login
2025-06-22T22:07:09.247+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.filter.RequestLoggingFilter          : Content-Type: application/json
2025-06-22T22:07:09.248+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.filter.RequestLoggingFilter          : Content-Length: 53
2025-06-22T22:07:09.255+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-22T22:07:09.256+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id 3707F987AF2E25021EB804BDF1FBE0A9
2025-06-22T22:07:09.267+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Secured POST /api/auth/login
2025-06-22T22:07:09.413+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.controller.AuthController            : Raw login request received: {username=alex, password=password123}
2025-06-22T22:07:09.414+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.controller.AuthController            : Attempting login for user: 'alex'
2025-06-22T22:07:09.415+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.AuthService                  : Attempting to authenticate user: 'alex'
2025-06-22T22:07:09.617+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.CustomUserDetailsService     : Attempting to load user by username: alex
2025-06-22T22:07:09.648+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.repository.UserRepository            : Searching for user by username: alex
2025-06-22T22:07:10.143+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.repository.UserRepository            : User found by username 'alex': no
2025-06-22T22:07:10.145+02:00  WARN 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.CustomUserDetailsService     : User not found with username: alex
2025-06-22T22:07:10.275+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.s.a.dao.DaoAuthenticationProvider    : Failed to find user 'alex'
2025-06-22T22:07:10.280+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] o.s.s.authentication.ProviderManager     : Authentication failed with provider DaoAuthenticationProvider since Bad credentials
2025-06-22T22:07:10.281+02:00 ERROR 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.service.AuthService                  : Authentication failed - invalid credentials for user: alex
2025-06-22T22:07:10.281+02:00 ERROR 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.controller.AuthController            : Login failed - invalid credentials for user: alex
2025-06-22T22:07:10.343+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-1] app.filter.RequestLoggingFilter          : Request payload: {
  "username": "alex",
  "password": "password123"
}
2025-06-22T22:07:16.815+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing POST /api/auth/register
2025-06-22T22:07:16.816+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-22T22:07:16.817+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id 3707F987AF2E25021EB804BDF1FBE0A9
2025-06-22T22:07:16.817+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured POST /api/auth/register
2025-06-22T22:07:17.040+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.service.AuthService                  : Registering new user with username: alex
2025-06-22T22:07:17.041+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.repository.UserRepository            : Checking if user exists with username: alex
2025-06-22T22:07:17.061+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.repository.UserRepository            : User with username 'alex' exists: false
2025-06-22T22:07:17.335+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-2] app.service.AuthService                  : Successfully registered user: alex with role: ROLE_ADMIN
2025-06-22T22:07:20.935+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing POST /api/auth/login
2025-06-22T22:07:20.937+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.filter.RequestLoggingFilter          : Request URL: POST http://localhost:8080/api/auth/login
2025-06-22T22:07:20.937+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.filter.RequestLoggingFilter          : Content-Type: application/json
2025-06-22T22:07:20.937+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.filter.RequestLoggingFilter          : Content-Length: 53
2025-06-22T22:07:20.938+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-06-22T22:07:20.938+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id 3707F987AF2E25021EB804BDF1FBE0A9
2025-06-22T22:07:20.939+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured POST /api/auth/login
2025-06-22T22:07:20.942+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.controller.AuthController            : Raw login request received: {username=alex, password=password123}
2025-06-22T22:07:20.943+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.controller.AuthController            : Attempting login for user: 'alex'
2025-06-22T22:07:20.943+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.service.AuthService                  : Attempting to authenticate user: 'alex'
2025-06-22T22:07:20.943+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.service.CustomUserDetailsService     : Attempting to load user by username: alex
2025-06-22T22:07:20.944+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.repository.UserRepository            : Searching for user by username: alex
2025-06-22T22:07:20.958+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.repository.UserRepository            : User found by username 'alex': yes
2025-06-22T22:07:20.959+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.service.CustomUserDetailsService     : Found user: alex with role: ROLE_ADMIN
2025-06-22T22:07:21.110+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2025-06-22T22:07:21.111+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.service.AuthService                  : Authentication successful for user: 'alex'
2025-06-22T22:07:21.423+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.service.JwtService                   : Generated token pair for user 'alex'
2025-06-22T22:07:21.423+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.controller.AuthController            : Login successful for user: 'alex'
2025-06-22T22:07:21.431+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-3] app.filter.RequestLoggingFilter          : Request payload: {
  "username": "alex",
  "password": "password123"
}
2025-06-22T22:07:26.812+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing POST /api/products
2025-06-22T22:07:26.981+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.service.JwtService                   : Extracted claims successfully: subject='alex', type='accessToken'
2025-06-22T22:07:26.983+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.service.JwtService                   : Extracted username from access token: alex
2025-06-22T22:07:26.983+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.service.CustomUserDetailsService     : Attempting to load user by username: alex
2025-06-22T22:07:26.983+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.repository.UserRepository            : Searching for user by username: alex
2025-06-22T22:07:26.992+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.repository.UserRepository            : User found by username 'alex': yes
2025-06-22T22:07:26.993+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.service.CustomUserDetailsService     : Found user: alex with role: ROLE_ADMIN
2025-06-22T22:07:26.995+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.service.JwtService                   : Extracted claims successfully: subject='alex', type='accessToken'
2025-06-22T22:07:26.996+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.service.JwtService                   : Extracted username from access token: alex
2025-06-22T22:07:26.996+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] app.service.JwtService                   : Token validation for user 'alex': true
2025-06-22T22:07:26.998+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured POST /api/products
2025-06-22T22:07:27.021+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] horizationManagerBeforeMethodInterceptor : Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity app.controller.ProductController.createProduct(app.model.Product); target is of class [app.controller.ProductController]
2025-06-22T22:07:27.120+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-4] horizationManagerBeforeMethodInterceptor : Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity app.controller.ProductController.createProduct(app.model.Product); target is of class [app.controller.ProductController]
2025-06-22T22:07:31.879+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Securing PUT /api/products/1
2025-06-22T22:07:31.882+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.service.JwtService                   : Extracted claims successfully: subject='alex', type='accessToken'
2025-06-22T22:07:31.884+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.service.JwtService                   : Extracted username from access token: alex
2025-06-22T22:07:31.884+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.service.CustomUserDetailsService     : Attempting to load user by username: alex
2025-06-22T22:07:31.884+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.repository.UserRepository            : Searching for user by username: alex
2025-06-22T22:07:31.893+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.repository.UserRepository            : User found by username 'alex': yes
2025-06-22T22:07:31.894+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.service.CustomUserDetailsService     : Found user: alex with role: ROLE_ADMIN
2025-06-22T22:07:31.897+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.service.JwtService                   : Extracted claims successfully: subject='alex', type='accessToken'
2025-06-22T22:07:31.898+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.service.JwtService                   : Extracted username from access token: alex
2025-06-22T22:07:31.899+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] app.service.JwtService                   : Token validation for user 'alex': true
2025-06-22T22:07:31.900+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Secured PUT /api/products/1
2025-06-22T22:07:31.910+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] horizationManagerBeforeMethodInterceptor : Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity app.controller.ProductController.updateProduct(java.lang.Long,app.dto.ProductDto); target is of class [app.controller.ProductController]
2025-06-22T22:07:31.911+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-5] horizationManagerBeforeMethodInterceptor : Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity app.controller.ProductController.updateProduct(java.lang.Long,app.dto.ProductDto); target is of class [app.controller.ProductController]
2025-06-22T22:08:07.876+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Securing GET /api/products/1
2025-06-22T22:08:07.881+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-6] app.service.JwtService                   : Extracted claims successfully: subject='alex', type='accessToken'
2025-06-22T22:08:07.881+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-6] app.service.JwtService                   : Extracted username from access token: alex
2025-06-22T22:08:07.881+02:00  INFO 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-6] app.service.CustomUserDetailsService     : Attempting to load user by username: alex
2025-06-22T22:08:07.881+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-6] app.repository.UserRepository            : Searching for user by username: alex
2025-06-22T22:08:07.892+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-6] app.repository.UserRepository            : User found by username 'alex': yes
2025-06-22T22:08:07.893+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-6] app.service.CustomUserDetailsService     : Found user: alex with role: ROLE_ADMIN
2025-06-22T22:08:07.895+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-6] app.service.JwtService                   : Extracted claims successfully: subject='alex', type='accessToken'
2025-06-22T22:08:07.895+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-6] app.service.JwtService                   : Extracted username from access token: alex
2025-06-22T22:08:07.896+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-6] app.service.JwtService                   : Token validation for user 'alex': true
2025-06-22T22:08:07.897+02:00 DEBUG 13812 --- [spring-boot-jwt-auth-refresh] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Secured GET /api/products/1
